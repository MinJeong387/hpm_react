// ‚úÖ components/PhotoUploader/PhotoUploader.jsx
import React, {
  useState,
  useRef,
  forwardRef,
  useImperativeHandle,
  useEffect,
} from "react";
import "../../css/PhotoUploader.css";

const PhotoUploader = forwardRef(
  (
    { onChange, initialPhotos = [], onDeleteServerPhoto, className = "" },
    ref
  ) => {
    const [localImages, setLocalImages] = useState([]); // ÏïÑÏßÅ ÏÑúÎ≤ÑÏóê Ï†ÄÏû•ÎêòÏßÄ ÏïäÏùÄ Ïù¥ÎØ∏ÏßÄ
    const [serverImages, setServerImages] = useState([]); // ÏÑúÎ≤ÑÏóêÏÑú Í∞ÄÏ†∏Ïò® Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄ
    const fileInputRef = useRef();

    // üîÅ Ï¥àÍ∏∞ ÏÑúÎ≤Ñ Ïù¥ÎØ∏ÏßÄ Ï£ºÏûÖ (Í≤åÏãúÍ∏Ä ÏàòÏ†ï Ïãú)
    useEffect(() => {
      if (initialPhotos && initialPhotos.length > 0) {
        setServerImages(initialPhotos);
      }
    }, [initialPhotos]);

    const MAX_IMAGE_COUNT = 8; // ÏµúÎåÄ Ïù¥ÎØ∏ÏßÄ Í∞úÏàò

    const handleFiles = (files) => {
      const newFiles = Array.from(files);

      // Ï†ÑÏ≤¥ Í∞úÏàò Í≥ÑÏÇ∞ (Í∏∞Ï°¥ ÏÑúÎ≤Ñ Ïù¥ÎØ∏ÏßÄ + Î°úÏª¨ Ïù¥ÎØ∏ÏßÄ + ÏÉàÎ°ú Ï∂îÍ∞ÄÎê† Ïù¥ÎØ∏ÏßÄ)
      const totalCount =
        serverImages.length + localImages.length + newFiles.length;

      if (totalCount > MAX_IMAGE_COUNT) {
        alert(`Ïù¥ÎØ∏ÏßÄÎäî ÏµúÎåÄ ${MAX_IMAGE_COUNT}Ïû•ÍπåÏßÄ ÏóÖÎ°úÎìúÌï† Ïàò ÏûàÏäµÎãàÎã§.`);
        return;
      }

      // ‚úÖ Î°úÏª¨ Ïù¥ÎØ∏ÏßÄ ÏÉÅÌÉúÎäî Ïò§ÏßÅ newFiles Í∏∞Ï§Ä
      const updatedLocal = [...localImages, ...newFiles];
      setLocalImages(updatedLocal);

      // ‚úÖ ÏÑúÎ≤Ñ Ïù¥ÎØ∏ÏßÄ + Î°úÏª¨ Ïù¥ÎØ∏ÏßÄÎßå Ìï©Ï≥êÏÑú ÏÉÅÏúÑÎ°ú Ï†ÑÎã¨
      onChange([...serverImages, ...updatedLocal]);
    };

    const handleDeleteLocal = (index) => {
      const updated = localImages.filter((_, i) => i !== index);
      setLocalImages(updated);
      onChange([...serverImages, ...updated]);
    };

    const handleDeleteServer = (photo) => {
      if (onDeleteServerPhoto) {
        onDeleteServerPhoto(photo.id);
      }
      const updated = serverImages.filter((p) => p.id !== photo.id);
      setServerImages(updated);
      onChange([...updated, ...localImages]);
    };

    const handleDrop = (e) => {
      e.preventDefault();
      handleFiles(e.dataTransfer.files);
    };

    const handleInputChange = (e) => {
      handleFiles(e.target.files);
    };

    useImperativeHandle(ref, () => ({
      getFiles: () => localImages,
      getServerPhotos: () => serverImages.map((photo) => photo.file_name), // ÎòêÎäî photo.id
    }));

    return (
      <div
        className={`photo-uploader-wrapper ${className}`}
        onDragOver={(e) => e.preventDefault()}
        onDrop={handleDrop}
      >
        {/* ‚úÖ ÏÑúÎ≤Ñ Ïù¥ÎØ∏ÏßÄ ÎØ∏Î¶¨Î≥¥Í∏∞ */}
        {/* {serverImages.length > 0 && (
          <>
            <div className="preview-container">
              {serverImages.map((photo, index) => (
                <div key={`server-${index}`} className="preview-image">
                  <img src={photo.file_path} alt="server" />
                  <button
                    type="button"
                    className="remove-btn"
                    onClick={() => handleDeleteServer(photo)}
                  >
                    &times;
                  </button>
                </div>
              ))}
            </div>
            <p className="image-count">
              {serverImages.length + localImages.length} / {MAX_IMAGE_COUNT}
            </p>
          </>
        )} */}

        {/* ‚úÖ Î°úÏª¨ Ïù¥ÎØ∏ÏßÄ ÎØ∏Î¶¨Î≥¥Í∏∞ */}
        {/* {localImages.length > 0 && (
          <>
            <div className="preview-container">
              {localImages.map((file, index) => (
                <div key={`local-${index}`} className="preview-image">
                  <img src={URL.createObjectURL(file)} alt="preview" />
                  <button
                    type="button"
                    className="remove-btn"
                    onClick={() => handleDeleteLocal(index)}
                  >
                    &times;
                  </button>
                </div>
              ))}
            </div>
            <p className="image-count">
              {serverImages.length + localImages.length} / {MAX_IMAGE_COUNT}
            </p>
          </>
        )} */}
        {(serverImages.length > 0 || localImages.length > 0) && (
          <>
            <div className="preview-container">
              {serverImages.map((photo, index) => (
                <div key={`server-${index}`} className="preview-image">
                  <img src={photo.file_path} alt="server" />
                  <button
                    type="button"
                    className="remove-btn"
                    onClick={() => handleDeleteServer(photo)}
                  >
                    &times;
                  </button>
                </div>
              ))}

              {localImages.map((file, index) => (
                <div key={`local-${index}`} className="preview-image">
                  <img src={URL.createObjectURL(file)} alt="preview" />
                  <button
                    type="button"
                    className="remove-btn"
                    onClick={() => handleDeleteLocal(index)}
                  >
                    &times;
                  </button>
                </div>
              ))}
            </div>

            <p className="image-count">
              {serverImages.length + localImages.length} / {MAX_IMAGE_COUNT}
            </p>
          </>
        )}

        {/* Îì±Î°ù Î≤ÑÌäºÏùÄ Ìï≠ÏÉÅ Î≥¥Ïù¥Í≤å */}
        <div className="upload-button-container">
          <button
            type="button"
            className="upload-button"
            onClick={() => fileInputRef.current.click()}
          >
            Ïù¥ÎØ∏ÏßÄ
          </button>
          <input
            type="file"
            accept="image/*"
            multiple
            ref={fileInputRef}
            onChange={handleInputChange}
            style={{ display: "none" }}
          />
        </div>
      </div>
    );
  }
);

export default PhotoUploader;
